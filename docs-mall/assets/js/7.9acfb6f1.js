(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{257:function(e,t,a){"use strict";a.r(t);var v=a(28),s=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"vue在自定义组件中使用v-model及v-model的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue在自定义组件中使用v-model及v-model的本质"}},[e._v("#")]),e._v(" vue在自定义组件中使用v-model及v-model的本质")]),e._v(" "),a("blockquote",[a("p",[e._v("v-model本质是什么?如何在我们写的自定义组件的使用v-model？")])]),e._v(" "),a("h3",{attrs:{id:"_1、本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、本质"}},[e._v("#")]),e._v(" 1、本质")]),e._v(" "),a("ul",[a("li",[e._v("首先我们来看看"),a("code",[e._v("v-model")]),e._v("是个什么东西？")])]),e._v(" "),a("blockquote",[a("p",[e._v("其实本质上，"),a("code",[e._v("v-model")]),e._v("是"),a("code",[e._v("v-bind")]),e._v("以及"),a("code",[e._v("v-on")]),e._v("配合使用的语法糖，举个例子：")])]),e._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("input v"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 就是相当于: ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("input "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),e._v(" @input"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value= $event.target.test"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2、model选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、model选项"}},[e._v("#")]),e._v(" 2、model选项")]),e._v(" "),a("p",[e._v("（1）由上面可以知道"),a("code",[e._v("v-model")]),e._v("的本质是什么，那么我们如何在自定义组件上使用"),a("code",[e._v("v-model")]),e._v("呢？首先要了解"),a("a",{attrs:{href:"https://cn.vuejs.org/v2/api/#model",target:"_blank",rel:"noopener noreferrer"}},[e._v("model"),a("OutboundLink")],1),e._v("这个选项。")]),e._v(" "),a("blockquote",[a("p",[e._v("允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。")])]),e._v(" "),a("p",[e._v("（2）结合第一点的代码概括起来是个什么意思呢？就是说，本来默认是这样的：")]),e._v(" "),a("ul",[a("li",[e._v("子接收到的"),a("code",[e._v("prop值")]),e._v(" = "),a("code",[e._v("value")])]),e._v(" "),a("li",[e._v("监听子组件触发的"),a("code",[e._v("事件名event")]),e._v(" = "),a("code",[e._v("input")])])]),e._v(" "),a("p",[e._v("（3）我们要在自定义组件上用啊，老是用默认的那岂不是限制了我的发挥？于是，vue在"),a("code",[e._v("2.2.0")]),e._v("版本中新增了一个"),a("code",[e._v("model")]),e._v("选项，可以让我们这样：")]),e._v(" "),a("ul",[a("li",[e._v("子接收到的"),a("code",[e._v("prop值")]),e._v(" = "),a("code",[e._v('"想什么值就什么值"')])]),e._v(" "),a("li",[e._v("监听子组件触发的"),a("code",[e._v("事件名event")]),e._v(" = "),a("code",[e._v('"想什么事件名就什么事件名"')])])]),e._v(" "),a("p",[e._v("（4）还是有点蒙？没关系，实践才是检验真理的唯一标准嘛，我们来用实例跑一下，看看怎么用，不过在这之前，你得先理解"),a("a",{attrs:{href:"https://www.jianshu.com/p/af9cb05bfbaf",target:"_blank",rel:"noopener noreferrer"}},[e._v("父子组件中的传值、单项数据流"),a("OutboundLink")],1),e._v("是怎么一回事。")]),e._v(" "),a("h3",{attrs:{id:"_3、使用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、使用实例"}},[e._v("#")]),e._v(" 3、使用实例")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("父组件中使用"),a("code",[e._v("v-model")]),e._v(" "),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2891127-e1b686f989537026.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"父组件中"}})])]),e._v(" "),a("li",[a("p",[e._v("子组件中的model选项就做了前面所说的事情：接收到的prop就是"),a("code",[e._v("text")]),e._v("，定义绑定监听的事件名就是"),a("code",[e._v("onEmitFromChild")]),e._v("。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2891127-bba00805af150971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"子组件中"}})])]),e._v(" "),a("li",[a("p",[e._v("最后我们就可以看到在组件上实现了值的绑定")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2891127-681e32556bd4b99e.gif?imageMogr2/auto-orient/strip",alt:"实例效果.gif"}})]),e._v(" "),a("ul",[a("li",[e._v("好的，到了这里我们为了加深理解同时也是为了响应开头，达到一波首尾呼应的强烈文章效果，，，，在子组件中（父组件不用动），我们注释掉"),a("code",[e._v("model选项")]),e._v("，使用默认的方式，这样应该你能更好的再次理解"),a("code",[e._v("v-model")]),e._v("的本质。（效果跟上面的gif是一样的）")])]),e._v(" "),a("blockquote",[a("p",[e._v("其实本质上，"),a("code",[e._v("v-model")]),e._v("是"),a("code",[e._v("v-bind")]),e._v("以及"),a("code",[e._v("v-on")]),e._v("配合使用的语法糖。\n默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2891127-d235a33e11600f92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"v-model的本质"}})]),e._v(" "),a("h3",{attrs:{id:"_4、其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、其他"}},[e._v("#")]),e._v(" 4、其他")]),e._v(" "),a("p",[e._v("其实在我的理解中，将"),a("code",[e._v("v-model")]),e._v("运用在自定义组件中实现值的双向绑定，这只不过是简化了单向数据流的操作，比如不用注册接收emit发射出来的事件函数再去改变值，减少了代码量。但是我觉得提高了维护成本，可能在例如表单组件中可以较好的运用这个特性以外，我还是宁愿麻烦一点走个完整的单项数据流，如果状态比较多就用"),a("code",[e._v("vuex")]),e._v("，这样可能更加直观，更好维护。")])])}),[],!1,null,null,null);t.default=s.exports}}]);